name: "Deploy application to k8s"

on:
  push:
    branches:
      - master
      - pr-deployer

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1
  USE_ECR: "true"

jobs:
  setup:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get Short SHA
        id: get_sha
        run: echo ::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)
      - uses: olafurpg/setup-scala@v11
      - name: Login to docker
        uses: docker/login-action@v1.12.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        if: env.USE_ECR == true
      - name: Create ecr repository
        env:
          REPO_NAME: argonaut/hello-world
        run: aws ecr describe-repositories --repository-names $REPO_NAME || aws ecr create-repository --repository-name $REPO_NAME
        if: env.USE_ECR == true
      - name: Configure kubeconfig
        run: aws eks update-kubeconfig --name dev
      - name: Build and push image
        run: |
          echo "Pushing with image tag ${{ steps.get_sha.outputs.SHA_SHORT }}"
          sbt clean
          sbt clean docker:publish -Dversion='${{ steps.get_sha.outputs.SHA_SHORT }}'
      - name: Deploy to k8s
        run: |
          sbt kubeyml:gen -Dversion='${{ steps.get_sha.outputs.SHA_SHORT }}'
          kubectl apply -f target/kubeyml/

# Help on this action:
# 1. Add the secrets.
# 2. Change the env variable AWS_DEFAULT_REGION to where your cluster is.
#    And in the "Configure kubeconfig" step replace 'dev' with your cluster name
# 3. In your build.sbt file, accept version from props refer the build.sbt file in this repository.
#    Version is passed as props to tag the images and push to the docker registry. As we don't want
#    to overwrite the images.
# 4. `sbt kubeyml:gen -Dversion='${{ steps.get_sha.outputs.SHA_SHORT }}'` command generates the deployment file for k8s.
#    If your are using some other command to generate k8s please replace this command.
#    Make sure to pass -Dversion='${{ steps.get_sha.outputs.SHA_SHORT }}'`
#    as the image to deploy from needs to be the same as the one just pushed to docker registry.
#
# 5. After the "generate-kubernetes-resources" command do `kubectl apply -f path/to/resource.yaml`
#    If you have a folder which has multiple files do `kubectl apply -f path/to/resource-dir/`.

